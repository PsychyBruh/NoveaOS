import*as e from"../../core/i18n/i18n.js";import*as o from"../../core/root/root.js";import*as t from"../../core/sdk/sdk.js";import*as i from"../../ui/legacy/legacy.js";let r;const a={memory:"Memory",liveHeapProfile:"Live Heap Profile",startRecordingHeapAllocations:"Start recording heap allocations",stopRecordingHeapAllocations:"Stop recording heap allocations",startRecordingHeapAllocationsAndReload:"Start recording heap allocations and reload the page",startStopRecording:"Start/stop recording",showMemory:"Show Memory",showLiveHeapProfile:"Show Live Heap Profile",clearAllProfiles:"Clear all profiles",saveProfile:"Save profile…",loadProfile:"Load profile…",deleteProfile:"Delete profile"},n=e.i18n.registerUIStrings("panels/profiler/profiler-meta.ts",a),l=e.i18n.getLazilyComputedLocalizedString.bind(void 0,n);async function s(){return r||(r=await import("./profiler.js")),r}function c(e){return void 0===r?[]:e(r)}i.ViewManager.registerViewExtension({location:"panel",id:"heap_profiler",commandPrompt:l(a.showMemory),title:l(a.memory),order:60,loadView:async()=>(await s()).HeapProfilerPanel.HeapProfilerPanel.instance()}),i.ViewManager.registerViewExtension({location:"drawer-view",id:"live_heap_profile",commandPrompt:l(a.showLiveHeapProfile),title:l(a.liveHeapProfile),persistence:"closeable",order:100,loadView:async()=>(await s()).LiveHeapProfileView.LiveHeapProfileView.instance(),experiment:o.Runtime.ExperimentName.LIVE_HEAP_PROFILE}),i.ActionRegistration.registerActionExtension({actionId:"live-heap-profile.toggle-recording",iconClass:"record-start",toggleable:!0,toggledIconClass:"record-stop",toggleWithRedColor:!0,loadActionDelegate:async()=>new((await s()).LiveHeapProfileView.ActionDelegate),category:i.ActionRegistration.ActionCategory.MEMORY,experiment:o.Runtime.ExperimentName.LIVE_HEAP_PROFILE,options:[{value:!0,title:l(a.startRecordingHeapAllocations)},{value:!1,title:l(a.stopRecordingHeapAllocations)}]}),i.ActionRegistration.registerActionExtension({actionId:"live-heap-profile.start-with-reload",iconClass:"refresh",loadActionDelegate:async()=>new((await s()).LiveHeapProfileView.ActionDelegate),category:i.ActionRegistration.ActionCategory.MEMORY,experiment:o.Runtime.ExperimentName.LIVE_HEAP_PROFILE,title:l(a.startRecordingHeapAllocationsAndReload)}),i.ActionRegistration.registerActionExtension({actionId:"profiler.heap-toggle-recording",category:i.ActionRegistration.ActionCategory.MEMORY,iconClass:"record-start",title:l(a.startStopRecording),toggleable:!0,toggledIconClass:"record-stop",toggleWithRedColor:!0,contextTypes:()=>c((e=>[e.HeapProfilerPanel.HeapProfilerPanel])),loadActionDelegate:async()=>(await s()).HeapProfilerPanel.HeapProfilerPanel.instance(),bindings:[{platform:"windows,linux",shortcut:"Ctrl+E"},{platform:"mac",shortcut:"Meta+E"}]}),i.ActionRegistration.registerActionExtension({actionId:"profiler.clear-all",category:i.ActionRegistration.ActionCategory.MEMORY,iconClass:"clear",contextTypes:()=>c((e=>[e.ProfilesPanel.ProfilesPanel])),loadActionDelegate:async()=>new((await s()).ProfilesPanel.ActionDelegate),title:l(a.clearAllProfiles)}),i.ActionRegistration.registerActionExtension({actionId:"profiler.load-from-file",category:i.ActionRegistration.ActionCategory.MEMORY,iconClass:"import",contextTypes:()=>c((e=>[e.ProfilesPanel.ProfilesPanel])),loadActionDelegate:async()=>new((await s()).ProfilesPanel.ActionDelegate),title:l(a.loadProfile),bindings:[{platform:"windows,linux",shortcut:"Ctrl+O"},{platform:"mac",shortcut:"Meta+O"}]}),i.ActionRegistration.registerActionExtension({actionId:"profiler.save-to-file",category:i.ActionRegistration.ActionCategory.MEMORY,iconClass:"download",contextTypes:()=>c((e=>[e.ProfileHeader.ProfileHeader])),loadActionDelegate:async()=>new((await s()).ProfilesPanel.ActionDelegate),title:l(a.saveProfile),bindings:[{platform:"windows,linux",shortcut:"Ctrl+S"},{platform:"mac",shortcut:"Meta+S"}]}),i.ActionRegistration.registerActionExtension({actionId:"profiler.delete-profile",category:i.ActionRegistration.ActionCategory.MEMORY,iconClass:"download",contextTypes:()=>c((e=>[e.ProfileHeader.ProfileHeader])),loadActionDelegate:async()=>new((await s()).ProfilesPanel.ActionDelegate),title:l(a.deleteProfile)}),i.ContextMenu.registerProvider({contextTypes:()=>[t.RemoteObject.RemoteObject],loadProvider:async()=>(await s()).HeapProfilerPanel.HeapProfilerPanel.instance(),experiment:void 0}),i.ContextMenu.registerItem({location:i.ContextMenu.ItemLocation.PROFILER_MENU_DEFAULT,actionId:"profiler.save-to-file",order:10}),i.ContextMenu.registerItem({location:i.ContextMenu.ItemLocation.PROFILER_MENU_DEFAULT,actionId:"profiler.delete-profile",order:11});
